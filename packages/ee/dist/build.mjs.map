{
  "version": 3,
  "sources": ["../src/build.mts"],
  "sourcesContent": ["/*\n * Copyright (c) 2022 Kiyozz.\n *\n * All rights reserved.\n */\n\nimport { spawnSync } from 'child_process'\nimport { build as esbuildBuild } from 'esbuild'\nimport { BuildOptions as EsbuildBuildOptions, Format } from 'esbuild'\nimport glob from 'fast-glob'\nimport { bgCyan, bgGreen, bgRed, black, cyan, green, red } from 'kolorist'\nimport { platform } from 'node:os'\nimport * as path from 'node:path'\nimport * as process from 'node:process'\nimport { rimraf } from 'rimraf'\n\ntype BuildOptions = {\n  entries: string[]\n  tsProject: string\n  target?: string | string[]\n  outdir?: string\n  cleanOutDir?: boolean\n  checkTypes?: boolean\n  options?: EsbuildBuildOptions\n  formats?: Format[]\n}\n\nconst clean = async (path: string): Promise<void> => {\n  await rimraf(path)\n}\n\nconst getEntries = async (paths: string[]): Promise<string[]> => {\n  const base = process.cwd()\n\n  const result = await Promise.all(\n    paths.map((p): Promise<string[]> => {\n      let absP = path.resolve(base, p)\n\n      if (absP.includes(\"'\")) {\n        absP = absP.replace(/'/g, '')\n      }\n\n      if (platform() === 'win32') {\n        absP = absP.replace(/\\\\/g, '/')\n      }\n\n      return glob(absP)\n    }),\n  )\n\n  return result.flat()\n}\n\nconst humanizeDuration = (duration: number): string => {\n  if (duration > 1000) {\n    return `${duration / 1000}s`\n  }\n\n  return `${duration}ms`\n}\n\nconst task = (label: string) => {\n  console.log(`${bgCyan(black(' TASK '))} ${cyan(label)}`)\n  const now = Date.now()\n\n  return {\n    end() {\n      const duration = Date.now() - now\n      console.log(\n        `${bgGreen(black(' DONE '))} ${green(\n          `${label} - ${humanizeDuration(duration)}`,\n        )}`,\n      )\n    },\n    error() {\n      const duration = Date.now() - now\n\n      console.error(\n        `${bgRed(black(' ERROR '))} ${red(\n          `${label} - ${humanizeDuration(duration)}`,\n        )}`,\n      )\n    },\n  }\n}\n\nexport const build = async ({\n  entries,\n  tsProject,\n  target = 'node14',\n  outdir = 'dist',\n  cleanOutDir = false,\n  checkTypes = false,\n  formats = ['esm'],\n  options,\n}: BuildOptions): Promise<void> => {\n  if (cleanOutDir) {\n    await clean(outdir)\n  }\n\n  const entryPoints = await getEntries(entries)\n\n  if (checkTypes) {\n    const cTask = task('CHECKING TYPES')\n    const tscResult = spawnSync('tsc', ['-p', tsProject], {\n      cwd: process.cwd(),\n      stdio: 'inherit',\n    })\n\n    if (tscResult.error || tscResult.status !== 0) {\n      cTask.error()\n\n      if (tscResult.error) {\n        throw tscResult.error\n      }\n\n      throw new Error('error occurred during check-types')\n    }\n\n    cTask.end()\n  }\n\n  const bTask = task('BUILDING')\n\n  await Promise.all(\n    formats.map((format) => {\n      return esbuildBuild({\n        entryPoints,\n        outdir,\n        platform: 'node',\n        format,\n        target,\n        logLevel: 'info',\n        outExtension: {\n          '.js': format === 'cjs' || format === 'iife' ? '.js' : '.mjs',\n        },\n        ...options,\n      })\n    }),\n  )\n\n  bTask.end()\n}\n"],
  "mappings": "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",
  "names": ["path"]
}
