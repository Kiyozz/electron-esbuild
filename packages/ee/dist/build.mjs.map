{
  "version": 3,
  "sources": ["../src/build.mts"],
  "sourcesContent": ["/*\n * Copyright (c) 2022 Kiyozz.\n *\n * All rights reserved.\n */\n\nimport { sync as spawnSync } from 'cross-spawn'\nimport { build as esbuildBuild } from 'esbuild'\nimport { BuildOptions as EsbuildBuildOptions, Format } from 'esbuild'\nimport glob from 'fast-glob'\nimport { bgCyan, bgGreen, black, cyan, green } from 'kolorist'\nimport { platform } from 'node:os'\nimport path from 'node:path'\nimport rimraf from 'rimraf'\n\ntype BuildOptions = {\n  entries: string[]\n  tsProject: string\n  target?: string | string[]\n  outdir?: string\n  cleanOutDir?: boolean\n  checkTypes?: boolean\n  options?: EsbuildBuildOptions\n  formats?: Format[]\n}\n\nconst clean = async (path: string): Promise<void> => {\n  return new Promise<void>((resolve, reject) => {\n    rimraf(path, (err) => {\n      if (err) reject(err)\n      else resolve()\n    })\n  })\n}\n\nconst getEntries = async (paths: string[]): Promise<string[]> => {\n  const base = process.cwd()\n\n  const result = await Promise.all(\n    paths.map((p): Promise<string[]> => {\n      let absP = path.resolve(base, p)\n\n      if (absP.includes(\"'\")) {\n        absP = absP.replace(/'/g, '')\n      }\n\n      if (platform() === 'win32') {\n        absP = absP.replace(/\\\\/g, '/')\n      }\n\n      return glob(absP)\n    }),\n  )\n\n  return result.flat()\n}\n\nconst humanizeDuration = (duration: number): string => {\n  if (duration > 1000) {\n    return `${duration / 1000}s`\n  }\n\n  return `${duration}ms`\n}\n\nconst task = (label: string): { end: () => void } => {\n  console.log(`${bgCyan(black(' TASK '))} ${cyan(label)}`)\n  const now = Date.now()\n\n  return {\n    end() {\n      const duration = Date.now() - now\n      console.log(\n        `${bgGreen(black(' DONE '))} ${green(\n          `${label} - ${humanizeDuration(duration)}`,\n        )}`,\n      )\n    },\n  }\n}\n\nexport const build = async ({\n  entries,\n  tsProject,\n  target = 'node14',\n  outdir = 'dist',\n  cleanOutDir = false,\n  checkTypes = false,\n  formats = ['esm'],\n  options,\n}: BuildOptions): Promise<void> => {\n  if (cleanOutDir) {\n    await clean(outdir)\n  }\n\n  const entryPoints = await getEntries(entries)\n\n  if (checkTypes) {\n    const cTask = task('CHECKING TYPES')\n    spawnSync(`tsc -p ${tsProject}`, { cwd: process.cwd(), stdio: 'inherit' })\n    cTask.end()\n  }\n\n  const bTask = task('BUILDING')\n\n  await Promise.all(\n    formats.map((format) => {\n      return esbuildBuild({\n        entryPoints,\n        outdir,\n        platform: 'node',\n        format,\n        target,\n        logLevel: 'info',\n        outExtension: {\n          '.js': format === 'cjs' || format === 'iife' ? '.js' : '.mjs',\n        },\n        ...options,\n      })\n    }),\n  )\n\n  bTask.end()\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAaA,MAAM,QAAQ,OAAO,UAAgC;AACnD,SAAO,IAAI,QAAc,CAAC,SAAS,WAAW;AAC5C,WAAO,OAAM,CAAC,QAAQ;AACpB,UAAI;AAAK,eAAO;AAAA;AACX;AAAA;AAAA;AAAA;AAKX,MAAM,aAAa,OAAO,UAAuC;AAC/D,QAAM,OAAO,QAAQ;AAErB,QAAM,SAAS,MAAM,QAAQ,IAC3B,MAAM,IAAI,CAAC,MAAyB;AAClC,QAAI,OAAO,KAAK,QAAQ,MAAM;AAE9B,QAAI,KAAK,SAAS,MAAM;AACtB,aAAO,KAAK,QAAQ,MAAM;AAAA;AAG5B,QAAI,eAAe,SAAS;AAC1B,aAAO,KAAK,QAAQ,OAAO;AAAA;AAG7B,WAAO,KAAK;AAAA;AAIhB,SAAO,OAAO;AAAA;AAGhB,MAAM,mBAAmB,CAAC,aAA6B;AACrD,MAAI,WAAW,KAAM;AACnB,WAAO,GAAG,WAAW;AAAA;AAGvB,SAAO,GAAG;AAAA;AAGZ,MAAM,OAAO,CAAC,UAAuC;AACnD,UAAQ,IAAI,GAAG,OAAO,MAAM,cAAc,KAAK;AAC/C,QAAM,MAAM,KAAK;AAEjB,SAAO;AAAA,IACL,MAAM;AACJ,YAAM,WAAW,KAAK,QAAQ;AAC9B,cAAQ,IACN,GAAG,QAAQ,MAAM,cAAc,MAC7B,GAAG,WAAW,iBAAiB;AAAA;AAAA;AAAA;AAOlC,MAAM,QAAQ,OAAO;AAAA,EAC1B;AAAA,EACA;AAAA,EACA,SAAS;AAAA,EACT,SAAS;AAAA,EACT,cAAc;AAAA,EACd,aAAa;AAAA,EACb,UAAU,CAAC;AAAA,EACX;AAAA,MACiC;AACjC,MAAI,aAAa;AACf,UAAM,MAAM;AAAA;AAGd,QAAM,cAAc,MAAM,WAAW;AAErC,MAAI,YAAY;AACd,UAAM,QAAQ,KAAK;AACnB,cAAU,UAAU,aAAa,EAAE,KAAK,QAAQ,OAAO,OAAO;AAC9D,UAAM;AAAA;AAGR,QAAM,QAAQ,KAAK;AAEnB,QAAM,QAAQ,IACZ,QAAQ,IAAI,CAAC,WAAW;AACtB,WAAO,aAAa;AAAA,MAClB;AAAA,MACA;AAAA,MACA,UAAU;AAAA,MACV;AAAA,MACA;AAAA,MACA,UAAU;AAAA,MACV,cAAc;AAAA,QACZ,OAAO,WAAW,SAAS,WAAW,SAAS,QAAQ;AAAA;AAAA,OAEtD;AAAA;AAKT,QAAM;AAAA;",
  "names": []
}
